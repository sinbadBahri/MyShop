# Generated by Django 4.2.7 on 2023-11-29 15:58

import apps.user.managers
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(error_messages={'max_length': "You email's length can not be more than 255 characters", 'unique': 'A user with the same email already exists.'}, help_text='Required. Must be a valid email address like example@example.com', max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(error_messages={'max_length': "First Name's length is lower than 32"}, help_text='Enter your first name', max_length=32, validators=[django.core.validators.RegexValidator(code='invalid', message='Only letters are allowed.', regex='^[a-zA-Z]+$')])),
                ('last_name', models.CharField(error_messages={'max_length': "Last Name's length is lower than 32"}, help_text='Enter your family name', max_length=32, validators=[django.core.validators.RegexValidator(code='invalid', message='Only letters are allowed.', regex='^[a-zA-Z]+$')])),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates whether the user is admin', verbose_name='Is admin')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='auth_user_set', related_query_name='user', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='auth_user_set', related_query_name='user', to='auth.permission')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', apps.user.managers.MyUserManager()),
            ],
        ),
    ]
